#include "OneFlow/OneFlowOps.td"

Rewrite BuildFusedBiasAddMaskScaleOpWithRate(a: Value, b: Value, mask: Value, axis: Attr, rate: Attr, dropout: Op) -> Op;
Rewrite CopyUserOpAttrs(src: Op, dst: Op) -> Op;

Pattern {
  let rate: Attr;
  let device_name: Attr;
  let device_tag: Attr;
  let axis: Attr;
  let dropout =
    op<oneflow.dropout>(
      op<oneflow.bias_add>(a: Value, b: Value) {axis = axis, device_name = device_name, device_tag = device_tag})
      {rate = rate, device_name = device_name, device_tag = device_tag} -> (out: Type, mask: Type);

  rewrite dropout with {
    let random_mask_like = CopyUserOpAttrs(dropout, op<oneflow.random_mask_like>(a){rate = rate} -> (mask));
    let fused_bias_add_mask_scale = BuildFusedBiasAddMaskScaleOpWithRate(a, b, random_mask_like.0, axis, rate, dropout);
    replace dropout with (fused_bias_add_mask_scale.0, random_mask_like.0);
  };
}

Pattern {
  let device_name: Attr;
  let device_tag: Attr;
  let axis: Attr;
  let gelu =
    op<oneflow.gelu>(
      op<oneflow.bias_add>(a: Value, b: Value) {axis = axis, device_name = device_name, device_tag = device_tag})
      {device_name = device_name, device_tag = device_tag} -> (out: Type);

  rewrite gelu with{
    replace gelu with CopyUserOpAttrs(gelu, op<oneflow.fused_bias_add_gelu>(a, b){axis = axis} -> (out));
  };
}

Pattern {
  let device_name: Attr;
  let device_tag: Attr;
  let axis: Attr;
  let epsilon: Attr;
  let training: Attr;
  let momentum: Attr;
  let x: Value;
  let moving_mean: Value;
  let moving_variance: Value;
  let gamma: Value;
  let beta: Value;
  let addend: Value;
  let normalization = op<oneflow.normalization>(x, moving_mean, moving_variance, gamma, beta) {operand_segment_sizes = attr<"dense<[1, 1, 1, 1, 1, 0]> : vector<6xi32>">, axis = axis, epsilon = epsilon, training = training, momentum = momentum, device_name = device_name, device_tag = device_tag} -> (y: Type, mean: Type, inv_variance: Type);
  let relu =
    op<oneflow.relu>(
      op<oneflow.add_n2>(normalization.0, addend) {device_name = device_name, device_tag = device_tag})
      {device_name = device_name, device_tag = device_tag} -> (out: Type);

  rewrite relu with{
    replace relu with CopyUserOpAttrs(relu, op<oneflow.normalization_add_relu>(x, addend, moving_mean, moving_variance, gamma, beta) {operand_segment_sizes = attr<"dense<[1, 1, 1, 1, 1, 1]> : vector<6xi32>">, result_segment_sizes = attr<"dense<[1, 1, 1, 1]> : vector<4xi32>">, axis = axis, epsilon = epsilon, training = training, momentum = momentum});
  };
}
